<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprPlayerStanding</spriteName>
  <solid>-1</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Initialize

phy_fixed_rotation = true; //Prevents object from rotating due to physics

jump_multiplier = 300 / 4;

move_multiplier = 5;
max_velocity_x = 200;
spot = false
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Pause event

///AI Logic

if (instance_exists(objPlayer)) 
{ 
    if (distance_to_point(objPlayer.x, objPlayer.y) &lt;= 256 
        &amp;&amp; !collision_line(x, y, objPlayer.x, objPlayer.y, objFloor, false, true)) 
        or spot = true
        {
        spot = true

        if (objPlayer.x &gt;= x) &amp;&amp; (phy_linear_velocity_x &lt; max_velocity_x) {
            physics_apply_force(x, y, (phy_mass * move_multiplier), 0);
            
        }

        if (objPlayer.x &lt;= x) &amp;&amp; (phy_linear_velocity_x &gt; -max_velocity_x) {
            physics_apply_force(x, y, -(phy_mass * move_multiplier), 0);
             
        }

        /*if ( ( objPlayer.y &lt;= y-4 ) &amp;&amp; !place_free(x, y + sprite_height / 2 - 6) )

        {
            physics_apply_force(x, y, 0, -10);
        }
        */
        if ( (objPlayer.y &lt;= y - 4) &amp;&amp; ( place_free(x  , y  ) ) 
        &amp;&amp; (!place_free(x, y + sprite_height / 2 - 6)) )
        {
            physics_apply_force(x, y, 0, -phy_mass * jump_multiplier);
            if (phy_speed_y &lt;= -phy_mass * jump_multiplier) 
            {
                phy_speed_y = -phy_mass * jump_multiplier;
            }
        }

    }
    

}


</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///get hit / hit back
if ( place_meeting ( x, y, objPlayer ) )
{

if ( x &lt;= objPlayer.x &amp;&amp; objPlayer.image_xscale = -1 )
or ( x &gt;= objPlayer.x &amp;&amp; objPlayer.image_xscale = 1 )
{
if ( objPlayer.sprite_index = sprPlayerKick )
{

    instance_create(x, y, objGibspawner);
    instance_destroy();

}

}





if ( x &lt;= objPlayer.x &amp;&amp; image_xscale = 1 )
or ( x &gt;= objPlayer.x &amp;&amp; image_xscale = -1 )
{
sprite_index = sprPlayerKick 
if ( image_index &gt;=  4 ){
room_restart()
}
}
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Animations

if ( phy_linear_velocity_x &gt; 5 ) image_xscale = 1;
else if ( phy_linear_velocity_x &lt; -5 ) image_xscale = -1;

if ( place_free(x, y + sprite_height / 2 + 2) )
{
    sprite_index = sprPlayerAir;
}
else if ( phy_linear_velocity_x &gt; 5 )
{
    if (phy_linear_velocity_x &lt; 150) sprite_index = sprPlayerWalking;
    else sprite_index = sprPlayerRunning;

    image_speed = abs(phy_linear_velocity_x) / 400;
}
else if ( phy_linear_velocity_x &lt; -5 )
{
    if (phy_linear_velocity_x &gt; -150) sprite_index = sprPlayerWalking;
    else sprite_index = sprPlayerRunning;
    
    image_speed = abs(phy_linear_velocity_x) / 400;
}
else 
{
    sprite_index = sprPlayerStanding;
    image_speed = 0.05;
}
if (distance_to_point(objPlayer.x, objPlayer.y) &lt;= 10
        &amp;&amp; !collision_line(x, y, objPlayer.x, objPlayer.y, objFloor, false, true)){ 
if ( x &lt;= objPlayer.x &amp;&amp; image_xscale = 1 )
or ( x &gt;= objPlayer.x &amp;&amp; image_xscale = -1 )
and ( phy_speed_x &lt;= 1 )
{
sprite_index = sprPlayerKick 
}
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="objPushboxMetal">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (other.phy_linear_velocity_y &gt; 0 
    &amp;&amp; other.x &gt;= x - 16 &amp;&amp; other.x &lt;= x + 16 &amp;&amp; other.y &lt; y)
{
    instance_create(x, y, objGibspawner);
    instance_destroy();
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="objDynamic">
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>Collide (do not remove)</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="objStatic">
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>Collide (do not remove)</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>-1</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>1</PhysicsObjectShape>
  <PhysicsObjectDensity>2</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.100000001490116</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>11,10</point>
    <point>22,10</point>
    <point>22,32</point>
    <point>11,32</point>
  </PhysicsShapePoints>
</object>
