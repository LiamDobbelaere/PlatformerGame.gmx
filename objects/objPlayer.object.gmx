<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprPlayerStanding</spriteName>
  <solid>-1</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Initialize

doResize();
randomize();
instance_create(0, 0, objPause);

switching_ready = false;
phy_fixed_rotation = true; //Prevents physics from affecting the object's rotation

jump_multiplier = 300;
jump_potential = 0;
jump_max_potential = 10;
jump_potential_multiplier = 25;
can_jump = true;
can_walljump = false;
can_walljump_always = false;
has_walljumped = false;
last_walljump_was_right = false;

is_sliding = false;
slide_potential = 0;
slide_max_potential = room_speed;

is_crawling = false;

move_slowdown_factor = 0.95;
move_multiplier = 7;
max_velocity_x = 128;

action_kick = false;

animation_counter = 0;

global.always_switch = false;
arriving = false;
isInSwitchZone = false;
canSwitchHere = false;

debug_isFrictionBraking = false;

dead = false;

///Prevents constant movement when controller is plugged in. Decimal can be altered.

gamepad_set_axis_deadzone(0, 0.3);
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Control bindings

controls_moveleft = global.key_left;
controls_moveright = global.key_right;
controls_upaction = global.key_up;
controls_downaction = global.key_down;
controls_kick = global.key_kick;

puppet_moveleft_direct = false;
puppet_moveright_direct = false;
puppet_downaction_direct = false;

puppet_upaction_direct = false;
puppet_upaction_pressed = false;
puppet_upaction_released = false;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Physics fixtures

fixture_standing = physics_fixture_create()
physics_fixture_set_box_shape(fixture_standing, 6, 6);
physics_fixture_set_density(fixture_standing, 2);
physics_fixture_set_restitution(fixture_standing, 0);
physics_fixture_set_linear_damping(fixture_standing, 0.1);
physics_fixture_set_angular_damping(fixture_standing, 0.1);
physics_fixture_set_friction(fixture_standing, 0.1);
fixture_standing_bound = physics_fixture_bind(fixture_standing, self);
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Switching arrival

if (global.switchreality)
{    
    instance_create(0, 0, objSwitchOverlay);
    audio_play_sound(sndSwitchOut, 0, false);
        
    phy_position_x = global.target_x;
    phy_position_y = global.target_y;
    
    phy_linear_velocity_x = global.target_xvel;
    phy_linear_velocity_y = global.target_yvel;
    sprite_index =  global.target_sprindex 
    
    global.switchreality = false;
    
    /*var emitter = instance_create(phy_position_x, phy_position_y, objParticleEmitter);
    emitter.emit_rate = room_speed / 32;
    emitter.radius = 16;
    emitter.target_sprite = sprSwitch;
    emitter.max_emits = 8;
    emitter.blend_color = c_white;
    emitter.active = true;*/
    
    arriving = true;
    
    alarm[1] = room_speed / 2;
    alarm[2] = 3;
}
else
{
    switching_ready = true;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Sliding particles/sfx init

slide_loop = audio_play_sound(sndSlideLoop, 0, true);
audio_sound_gain(slide_loop, 0, 0);

spark_emitter = instance_create(phy_position_x, phy_position_y, objParticleEmitter);

spark_emitter.emit_rate = room_speed / 16;
spark_emitter.blend_color = c_dkgray;
spark_emitter.radius = 8;
spark_emitter.constrain_x = true;
spark_emitter.target_sprite = sprSpark;
spark_emitter.alternate_sides = true;
spark_emitter.active = false;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Run inhertied events

event_user(0);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="3">
      <action>
        <libid>1</libid>
        <id>223</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>1</exetype>
        <functionname>action_current_room</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
    </event>
    <event eventtype="2" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Physics pause fix for switch arrival

physics_pause_enable(true);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///After switch arrival

switching_ready = true;
arriving = false;
with (objSwitchOverlay) instance_destroy();
physics_pause_enable(false);

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///On reality switch

room_goto(global.linked_room);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Controls
//The order in which the controls appear in this script is very important

velocity_x_divider = 1;

//Ducking/sliding
if ( (keyboard_check_direct(controls_downaction) || gamepad_axis_value(0, gp_axislv) &gt; 0) || (place_meeting(x, y - 8, objStatic) &amp;&amp; can_jump) )
{
    is_crawling = true;
    
    if (fixture_standing_bound != noone)
    {
        physics_remove_fixture(self, fixture_standing_bound);
        fixture_standing_bound = noone;
    }
    
    velocity_x_divider = 4;
}
else
{
    if (fixture_standing_bound == noone)
    {
        fixture_standing_bound = physics_fixture_bind(fixture_standing, self);
    }
    
    is_crawling = false;
}

//Moving right
if ( (keyboard_check_direct(controls_moveright) || puppet_moveright_direct || gamepad_axis_value(0, gp_axislh) &gt; 0) &amp;&amp; phy_linear_velocity_x &lt; max_velocity_x / velocity_x_divider )
{
    physics_apply_force(x, y, (phy_mass * move_multiplier), 0);
}

//Moving left
if ( (keyboard_check_direct(controls_moveleft) || puppet_moveleft_direct || gamepad_axis_value(0, gp_axislh) &lt; 0) &amp;&amp; phy_linear_velocity_x &gt; -max_velocity_x / velocity_x_divider )
{
    physics_apply_force(x, y, -(phy_mass * move_multiplier), 0);
}

if ( !place_meeting(x, y - 8, objStatic) &amp;&amp; !place_meeting(x, y - 8, objDynamic) ) { //Is there no ceiling above our puny heads?
    if ( place_meeting(x, y + 2, objStatic) || place_meeting(x, y + 2, objDynamic) )
    {
        has_walljumped = false;
    }
    
    if ( (keyboard_check_pressed(controls_upaction) || puppet_upaction_pressed || gamepad_button_check_pressed(0, gp_face1)) 
         &amp;&amp; (!keyboard_check_direct(controls_kick) &amp;&amp; !gamepad_button_check(0, gp_face2)) &amp;&amp; ((can_jump 
         &amp;&amp; (place_meeting(x, y + 2, objStatic) || place_meeting(x, y + 2, objDynamic)) &amp;&amp; abs(phy_linear_velocity_y) &lt; 1 * jump_multiplier/2)
         || (can_walljump &amp;&amp; !has_walljumped)) )
    {   
        if (can_walljump &amp;&amp; !can_walljump_always) has_walljumped = true;
    
        if (place_meeting(x + 2, y, objStatic)) last_walljump_was_right = true;
        else last_walljump_was_right = false;
        
        audio_play_sound(sndJump, 0, false);
        physics_apply_force(x, y, 0, -phy_mass * jump_multiplier );
        
        jump_potential = jump_max_potential;
        slide_potential = slide_max_potential;
        can_jump = false;
    }
    
    if ( (keyboard_check_direct(controls_upaction) || puppet_upaction_direct || gamepad_button_check(0, gp_face1)) &amp;&amp; phy_linear_velocity_y &lt; -phy_mass * jump_multiplier/2 
         &amp;&amp; !place_meeting(x, y + sprite_height / 2 + 5, objStatic) 
         &amp;&amp; !place_meeting(x, y + sprite_height / 2 + 5, objDynamic)
         &amp;&amp; jump_potential &gt; 0 )
    {
        jump_potential -= 1;
        
        physics_apply_force(x, y, 0, -phy_mass * jump_potential_multiplier );
    }
    
    if ( (place_meeting(x - 2, y, objStatic) || place_meeting(x + 2, y, objStatic)) //Is there a wall to our left or our right?
             &amp;&amp; phy_linear_velocity_y &gt; 0 &amp;&amp; slide_potential &gt; 0 )
    {
        var is_wall_left = place_meeting(x + 2, y, objStatic);
        if (is_wall_left != last_walljump_was_right) has_walljumped = false;
        
        if (phy_linear_velocity_y &gt; 30 &amp;&amp; slide_potential &gt; 0) 
        {
            phy_linear_velocity_y -= 10;
        }
        
        is_sliding = true;
        can_walljump = true;
        slide_potential -= 1;
    }
    else
    {
        is_sliding = false;
        can_walljump = false;
    }
    
    if ( (keyboard_check_released(controls_kick) || gamepad_button_check_released(0, gp_face2)) &amp;&amp; abs(phy_linear_velocity_x) &lt; 80 &amp;&amp; action_kick == false)
    {
        audio_play_sound(sndKick, 0, false);
    
        var nearestBox = instance_nearest(x, y, objPushboxMetal);
        var xImpulse = 1;
        var yImpulse = 1;
        
        if (keyboard_check_direct(controls_upaction) || gamepad_axis_value(0, gp_axislv) &lt; 0)
        {
            xImpulse = 0.5;
            yImpulse = 3;
        }
        
        if ( nearestBox != noone)
        {
            if ( point_distance(nearestBox.x, nearestBox.y, objPlayer.x, objPlayer.y) &lt;= 28 
                 &amp;&amp; !action_kick )
            {
                if (x &lt;= nearestBox.x)
                {
                    if (image_xscale == 1)
                    {
                        with (nearestBox) physics_apply_impulse(x, y, xImpulse, -yImpulse);    
                    }
                }
                else
                {
                    if (image_xscale == -1)
                    {
                        with (nearestBox) physics_apply_impulse(x, y, -xImpulse, -yImpulse);
                    }
                }
            }
        }
        
        action_kick = true
    }
}

puppet_upaction_pressed = false;
puppet_upaction_released = false;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Animations

if (global.switchreality) exit;

if ( phy_linear_velocity_x &gt; 5 ) image_xscale = 1;
else if ( phy_linear_velocity_x &lt; -5 ) image_xscale = -1;

if ( arriving )
{
    sprite_index = sprPlayerSwitch;
    image_speed = -((image_number - 1) / (room_speed / 2));
}
else if ( action_kick )
{
    if (sprite_index == sprPlayerKick)
    {
        animation_counter += 1;    
    
        if (animation_counter &gt; 13)
        {
            action_kick = false;
        }
    }
    else
    {
        sprite_index = sprPlayerKick;
        image_speed = 0.3;
        animation_counter = 0;
    }
}
else if ( !place_meeting(x, y + 2, objStatic) &amp;&amp; !place_meeting(x, y + 2, objDynamic) )
//else if ( (!can_jump || (!place_meeting(x, y + 2, objStatic) &amp;&amp; !place_meeting(x, y + 2, objDynamic))) &amp;&amp; abs(phy_linear_velocity_y) &gt; 3  )
{
    if ( is_sliding )
    {
        if ( place_meeting(x + 2, y, objStatic) ) image_xscale = 1;
        else image_xscale = -1;
        
        sprite_index = sprPlayerSlide;
    }
    else
    {
        spark_emitter.active = false;
        audio_sound_gain(slide_loop, 0, 0);
        gamepad_set_vibration(0, 0, 0);
        sprite_index = sprPlayerAir;    
    }
}
else if ( is_crawling )
{
    if ( abs(phy_linear_velocity_x) &gt; 64 ) sprite_index = sprPlayerFloorslide;
    else sprite_index = sprPlayerCrawl;
    
    if ( abs(phy_linear_velocity_x) &gt; 5 ) image_speed = 0.1;
    else image_speed = 0;
}
else if ( phy_linear_velocity_x &gt; 5 )
{
    if (phy_linear_velocity_x &lt; max_velocity_x/1.1) sprite_index = sprPlayerWalking;
    else sprite_index = sprPlayerRunning;

    image_speed = abs(phy_linear_velocity_x) / 400;
}
else if ( phy_linear_velocity_x &lt; -5 )
{
    if (phy_linear_velocity_x &gt; -max_velocity_x/1.1) sprite_index = sprPlayerWalking;
    else sprite_index = sprPlayerRunning;
    
    image_speed = abs(phy_linear_velocity_x) / 400;
}
else 
{
    sprite_index = sprPlayerStanding;
    image_speed = 0.05;
}


</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Switch zones

if (isInSwitchZone &amp;&amp; !place_meeting(x, y, objSwitchZone))
{
    isInSwitchZone = false;
    if (global.always_switch)
    {
        audio_play_sound(sndSwitchReady, 0, false);
    }
    else
    {
        audio_play_sound(sndSwitchBlocked, 0, false);
    }   
}

if (!isInSwitchZone &amp;&amp; place_meeting(x, y, objSwitchZone))
{
    isInSwitchZone = true;
    if (global.always_switch)
    {
        audio_play_sound(sndSwitchBlocked, 0, false);
    }
    else
    {
        audio_play_sound(sndSwitchReady, 0, false);
    }    
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Reality switching controls

canSwitchHere = false;

if (global.always_switch)
{
    if (!isInSwitchZone) canSwitchHere = true;
}
else
{
    if (isInSwitchZone) canSwitchHere = true;
}

if ((keyboard_check_pressed(global.key_switch) || gamepad_button_check(0, gp_shoulderr)) 
    &amp;&amp; global.switchreality = false 
    &amp;&amp; switching_ready 
    &amp;&amp; canSwitchHere) {
        


    global.switchreality = true;    
    global.target_x = phy_position_x;
    global.target_y = phy_position_y;
    global.target_xvel = phy_linear_velocity_x;
    global.target_yvel = phy_linear_velocity_y;
    global.target_sprindex = sprite_index;
    
    //background_colour = c_white;
    //image_blend = c_black;
    instance_create(0, 0, objSwitchOverlay);
    
    /*var emitter = instance_create(phy_position_x, phy_position_y, objParticleEmitter);
    emitter.emit_rate = room_speed / 32;
    emitter.blend_color = c_white;
    emitter.radius = 16;
    emitter.target_sprite = sprSwitchReverse;
    emitter.active = true;*/
    
    audio_sound_gain(slide_loop, 0, 250);
    audio_play_sound(sndSwitch, 0, false);
    
    physics_pause_enable(true);
    sprite_index = sprPlayerSwitch;
    image_speed = (image_number - 1) / (room_speed / 2);

    alarm[0] = room_speed / 2;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Anti edge falling glitch

if ( phy_speed_y = 0 ) {




if ( sprite_index = sprPlayerAir ) and ( place_meeting ( x+2, y, objFloor ) )
{
phy_speed_x = -.1
move_bounce_solid ( true )
}

if ( sprite_index = sprPlayerAir ) and ( place_meeting ( x-2, y, objFloor ) )
{
phy_speed_x = .1
move_bounce_solid ( true )
}

}

if phy_speed_y &lt;= -3
{
phy_speed_y = -3
}

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Physics movement modifiers

if (!keyboard_check_direct(controls_moveright) 
    &amp;&amp; !keyboard_check_direct(controls_moveleft) 
    &amp;&amp; !keyboard_check_direct(controls_downaction)
    &amp;&amp; !puppet_moveright_direct &amp;&amp; !puppet_moveleft_direct &amp;&amp; !puppet_downaction_direct
    &amp;&amp; gamepad_axis_value(0, gp_axislh) == 0
    &amp;&amp; gamepad_axis_value(0, gp_axislv) &lt;= 0)
{
    debug_isFrictionBraking = true;
    phy_linear_velocity_x = phy_linear_velocity_x * move_slowdown_factor;
}
else
{
    debug_isFrictionBraking = false;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Spark location

spark_emitter.x = phy_position_x;
spark_emitter.y = phy_position_y + 16;

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Parallax scrolling

//Back image
background_x[0] = view_xview[0] * 0.5;
background_x[1] = view_xview[0] * 0.1;

background_y[0] = (room_height - background_get_height(background_index[0])) - (view_yview[0] / room_height) * 25;
background_y[1] = (room_height - background_get_height(background_index[1]));


</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Death
if dead = true 
{
    instance_create(x,y,objGibspawner);
    instance_destroy();
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="objClient">
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>Collide (do not remove)</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="objDynamic">
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>Collide (do not remove)</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Jump reset

if (phy_linear_velocity_y &gt;= 0) can_jump = true;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="objStatic">
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>Collide (do not remove)</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Jump reset

if (phy_linear_velocity_y &gt;= 0) can_jump = true;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Slide particles/sfx

if ( abs(phy_linear_velocity_x) &gt; 64 &amp;&amp; is_crawling )
{
    if (!spark_emitter.active)
    {   
        spark_emitter.active = true;
        audio_sound_gain(slide_loop, 1, 250);
    }
    
    var vibration = min((abs(phy_linear_velocity_x) - 64) / (max_velocity_x - 64), 1);
    
    gamepad_set_vibration(0, vibration, vibration);
}
else
{
    if (spark_emitter.active = true) 
    {
        spark_emitter.active = false;
        audio_sound_gain(slide_loop, 0, 250);
    }
    
    gamepad_set_vibration(0, 0, 0);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Basic death

room_restart();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Drawing code

draw_self();

if (global.switchreality || arriving)
{
    var imageNum = image_index - 6;
    
    if (imageNum &gt;= 0)
    {
        for (i = 0; i &lt; view_hview / 32; i++)
        {
            draw_sprite(sprPlayerSwitchBeam, imageNum, phy_position_x, phy_position_y - (32 * (i + 1)));
        }    
    }
}

if (canSwitchHere &amp;&amp; !global.switchreality)
{
    draw_sprite(sprSwitchReady, 0, view_xview[0] + view_wview[0] - 48, view_yview[0] + view_hview[0] - 48);
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Debug mode

if (debug_mode)
{
    draw_set_color(c_black);
    draw_set_alpha(0.5);
    draw_rectangle(view_xview[0], view_yview[0], 
                   view_xview[0] + 5 * 32, view_yview[0] + 7 * 10, false);
    draw_set_alpha(1);
    draw_set_font(global.font_tiny)
    draw_set_color(c_lime);
    draw_set_halign(fa_left);
    draw_set_valign(fa_top);
    draw_text(view_xview[0], view_yview[0], "LIN. VEL. X: " + string(phy_linear_velocity_x));
    draw_text(view_xview[0], view_yview[0] + 8, "LIN. VEL. Y: " + string(phy_linear_velocity_y));
    draw_text(view_xview[0], view_yview[0] + 16, "CAN JUMP: " + string(can_jump));
    draw_text(view_xview[0], view_yview[0] + 24, "CAN W.JUMP: " + string(can_walljump));
    draw_text(view_xview[0], view_yview[0] + 32, "HAS W.JUMPED: " + string(has_walljumped));
    draw_text(view_xview[0], view_yview[0] + 40, "W.SLIDING: " + string(is_sliding));
    draw_text(view_xview[0], view_yview[0] + 48, "CRAWLING: " + string(is_crawling));    
    draw_text(view_xview[0], view_yview[0] + 56, "FRIC.BRAKE: " + string(debug_isFrictionBraking));    
    draw_text(view_xview[0], view_yview[0] + 64, "LAST WJ.RIGHT: " + string(last_walljump_was_right));    
    
    draw_set_color(c_black);
                   
    flag = phy_debug_render_coms | phy_debug_render_shapes
    physics_world_draw_debug(flag);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>-1</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>1</PhysicsObjectShape>
  <PhysicsObjectDensity>2</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.100000001490116</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>10,20</point>
    <point>22,20</point>
    <point>22,32</point>
    <point>10,32</point>
  </PhysicsShapePoints>
</object>
