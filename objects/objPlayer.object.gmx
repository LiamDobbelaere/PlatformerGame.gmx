<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprPlayerStanding</spriteName>
  <solid>-1</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Initialize
randomize();

phy_fixed_rotation = true; //Prevents object from rotating due to physics

jump_multiplier = 300;
jump_potential = 0;
jump_max_potential = 10;
jump_potential_multiplier = 25;
can_jump = true;
can_walljump = false;
can_walljump_always = false;
has_walljumped = false;

is_sliding = false;
slide_potential = 0;
slide_max_potential = room_speed;

is_crawling = false;

move_multiplier = 5;
max_velocity_x = 200;

action_kick = false;

animation_counter = 0;
/*part_emitter = instance_create(x, y, objParticleEmitter);
part_emitter.target_object = objPlayer;
part_emitter.active = false;
*/



</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Control bindings

controls_moveleft = vk_left;
controls_moveright = vk_right;
controls_upaction = vk_up;
controls_downaction = vk_down;
controls_kick = ord("F");
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Physics fixtures

fixture_standing = physics_fixture_create()
physics_fixture_set_box_shape(fixture_standing, 6, 6);
physics_fixture_set_density(fixture_standing, 2);
physics_fixture_set_restitution(fixture_standing, 0);
physics_fixture_set_linear_damping(fixture_standing, 0.1);
physics_fixture_set_angular_damping(fixture_standing, 0.1);
physics_fixture_set_friction(fixture_standing, 0.1);
fixture_standing_bound = physics_fixture_bind(fixture_standing, self);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Controls
/*
//Pause Event
if (global.pause) exit;

velocity_x_divider = 1;

if ( keyboard_check_direct (controls_downaction) || (place_meeting(x, y - 8, objStatic) &amp;&amp; can_jump) )
{
    is_crawling = true;
    
    if (fixture_standing_bound != noone)
    {
        physics_remove_fixture(self, fixture_standing_bound);
        fixture_standing_bound = noone;
    }
    
    velocity_x_divider = 4;
}
else
{
    if (fixture_standing_bound == noone)
    {
        fixture_standing_bound = physics_fixture_bind(fixture_standing, self);
    }
    
    is_crawling = false;
}

if ( keyboard_check_direct(controls_moveright) &amp;&amp; phy_linear_velocity_x &lt; max_velocity_x / velocity_x_divider )
{
    physics_apply_force(x, y, (phy_mass * move_multiplier), 0);
}

if ( keyboard_check_direct(controls_moveleft) &amp;&amp; phy_linear_velocity_x &gt; -max_velocity_x / velocity_x_divider )
{
    physics_apply_force(x, y, -(phy_mass * move_multiplier), 0);
}

/*if ( place_free(x, y + sprite_height / 2 - 6) &amp;&amp; phy_linear_velocity_y &gt; 0 )
{
    jump_potential = 0;
}*/

if ( !place_meeting(x, y - 8, objStatic) &amp;&amp; !place_meeting(x, y - 8, objDynamic) ) {
    if ( place_meeting(x, y + 2, objStatic) || place_meeting(x, y + 2, objDynamic) ){
    {
        has_walljumped = false;
    }
    
    if ( keyboard_check_pressed(controls_upaction) &amp;&amp; !keyboard_check_direct(controls_kick) &amp;&amp; ((can_jump 
         &amp;&amp; (place_meeting(x, y + 2, objStatic) || place_meeting(x, y + 2, objDynamic)) &amp;&amp; abs(phy_linear_velocity_y) &lt; 1 * jump_multiplier/2)
         || (can_walljump &amp;&amp; !has_walljumped)) )
    {   
        if (can_walljump &amp;&amp; !can_walljump_always) has_walljumped = true;
    
        audio_play_sound(sndJump, 0, false);
        physics_apply_force(x, y, 0, -phy_mass * jump_multiplier );
        
        jump_potential = jump_max_potential;
        slide_potential = slide_max_potential;
        can_jump = false;
    }
    
    if ( keyboard_check_direct(controls_upaction) &amp;&amp; phy_linear_velocity_y &lt; -phy_mass * jump_multiplier/2 
         &amp;&amp; !place_meeting(x, y + sprite_height / 2 + 5, objStatic) 
         &amp;&amp; !place_meeting(x, y + sprite_height / 2 + 5, objDynamic)
         &amp;&amp; jump_potential &gt; 0 )
    {
        jump_potential -= 1;
        
        physics_apply_force(x, y, 0, -phy_mass * jump_potential_multiplier );
    }
    }
    }
    
    if ( (place_meeting(x - 2, y, objStatic) || place_meeting(x + 2, y, objStatic))
             &amp;&amp; phy_linear_velocity_y &gt; 0 )
    {
        if (keyboard_check_direct(controls_moveright) || keyboard_check_direct(controls_moveleft))
        {
            if (phy_linear_velocity_y &gt; 30 &amp;&amp; slide_potential &gt; 0) 
            {
                phy_linear_velocity_y -= 10;
            }
            
            is_sliding = true;
            can_walljump = true;
            slide_potential -= 1;
        }
        else
        {
            can_walljump = false;
        }
    }
    else
    {
        is_sliding = false;
        can_walljump = false;
    }
    if ( !place_meeting(x, y - 8, objStatic) &amp;&amp; !place_meeting(x, y - 8, objDynamic) ) {
    if ( place_meeting(x, y + 2, objStatic) || place_meeting(x, y + 2, objDynamic) ){
    if ( keyboard_check_released(controls_kick) &amp;&amp; abs(phy_linear_velocity_x) &lt; 80 &amp;&amp; action_kick == false)
    {
        audio_play_sound(sndKick, 0, false);
    
        var nearestBox = instance_nearest(x, y, objPushboxMetal);
        var xImpulse = 1;
        var yImpulse = 1;
        
        if (keyboard_check_direct(controls_upaction))
        {
            xImpulse = 0.5;
            yImpulse = 3;
        }
        
        if ( nearestBox != noone)
        {
            if ( point_distance(nearestBox.x, nearestBox.y, objPlayer.x, objPlayer.y) &lt;= 28 
                 &amp;&amp; !action_kick )
            {
                if (x &lt;= nearestBox.x)
                {
                    if (image_xscale == 1)
                    {
                        with (nearestBox) physics_apply_impulse(x, y, xImpulse, -yImpulse);    
                    }
                }
                else
                {
                    if (image_xscale == -1)
                    {
                        with (nearestBox) physics_apply_impulse(x, y, -xImpulse, -yImpulse);
                    }
                }
            }
        }
        
        action_kick = true
    }
  }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Controls OLD

//Pause Event

velocity_x_divider = 1;

if ( keyboard_check_direct (controls_downaction) || (place_meeting(x, y - 8, objStatic) &amp;&amp; can_jump) )
{
    is_crawling = true;
    
    if (fixture_standing_bound != noone)
    {
        physics_remove_fixture(self, fixture_standing_bound);
        fixture_standing_bound = noone;
    }
    
    velocity_x_divider = 4;
}
else
{
    if (fixture_standing_bound == noone)
    {
        fixture_standing_bound = physics_fixture_bind(fixture_standing, self);
    }
    
    is_crawling = false;
}

if ( keyboard_check_direct(controls_moveright) &amp;&amp; phy_linear_velocity_x &lt; max_velocity_x / velocity_x_divider )
{
    physics_apply_force(x, y, (phy_mass * move_multiplier), 0);
}

if ( keyboard_check_direct(controls_moveleft) &amp;&amp; phy_linear_velocity_x &gt; -max_velocity_x / velocity_x_divider )
{
    physics_apply_force(x, y, -(phy_mass * move_multiplier), 0);
}

/*if ( place_free(x, y + sprite_height / 2 - 6) &amp;&amp; phy_linear_velocity_y &gt; 0 )
{
    jump_potential = 0;
}*/

if ( !place_meeting(x, y - 8, objStatic) &amp;&amp; !place_meeting(x, y - 8, objDynamic) ) {
    if ( place_meeting(x, y + 2, objStatic) || place_meeting(x, y + 2, objDynamic) )
    {
        has_walljumped = false;
    }
    
    if ( keyboard_check_pressed(controls_upaction) &amp;&amp; !keyboard_check_direct(controls_kick) &amp;&amp; ((can_jump 
         &amp;&amp; (place_meeting(x, y + 2, objStatic) || place_meeting(x, y + 2, objDynamic)) &amp;&amp; abs(phy_linear_velocity_y) &lt; 1 * jump_multiplier/2)
         || (can_walljump &amp;&amp; !has_walljumped)) )
    {   
        if (can_walljump &amp;&amp; !can_walljump_always) has_walljumped = true;
    
        audio_play_sound(sndJump, 0, false);
        physics_apply_force(x, y, 0, -phy_mass * jump_multiplier );
        
        jump_potential = jump_max_potential;
        slide_potential = slide_max_potential;
        can_jump = false;
    }
    
    if ( keyboard_check_direct(controls_upaction) &amp;&amp; phy_linear_velocity_y &lt; -phy_mass * jump_multiplier/2 
         &amp;&amp; !place_meeting(x, y + sprite_height / 2 + 5, objStatic) 
         &amp;&amp; !place_meeting(x, y + sprite_height / 2 + 5, objDynamic)
         &amp;&amp; jump_potential &gt; 0 )
    {
        jump_potential -= 1;
        
        physics_apply_force(x, y, 0, -phy_mass * jump_potential_multiplier );
    }
    
    if ( (place_meeting(x - 2, y, objStatic) || place_meeting(x + 2, y, objStatic))
             &amp;&amp; phy_linear_velocity_y &gt; 0 )
    {
        if (keyboard_check_direct(controls_moveright) || keyboard_check_direct(controls_moveleft))
        {
            if (phy_linear_velocity_y &gt; 30 &amp;&amp; slide_potential &gt; 0) 
            {
                phy_linear_velocity_y -= 10;
            }
            
            is_sliding = true;
            can_walljump = true;
            slide_potential -= 1;
        }
        else
        {
            can_walljump = false;
        }
    }
    else
    {
        is_sliding = false;
        can_walljump = false;
    }
    
    if ( keyboard_check_released(controls_kick) &amp;&amp; abs(phy_linear_velocity_x) &lt; 80 &amp;&amp; action_kick == false)
    {
        audio_play_sound(sndKick, 0, false);
    
        var nearestBox = instance_nearest(x, y, objPushboxMetal);
        var xImpulse = 1;
        var yImpulse = 1;
        
        if (keyboard_check_direct(controls_upaction))
        {
            xImpulse = 0.5;
            yImpulse = 3;
        }
        
        if ( nearestBox != noone)
        {
            if ( point_distance(nearestBox.x, nearestBox.y, objPlayer.x, objPlayer.y) &lt;= 28 
                 &amp;&amp; !action_kick )
            {
                if (x &lt;= nearestBox.x)
                {
                    if (image_xscale == 1)
                    {
                        with (nearestBox) physics_apply_impulse(x, y, xImpulse, -yImpulse);    
                    }
                }
                else
                {
                    if (image_xscale == -1)
                    {
                        with (nearestBox) physics_apply_impulse(x, y, -xImpulse, -yImpulse);
                    }
                }
            }
        }
        
        action_kick = true
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Animations

if ( phy_linear_velocity_x &gt; 5 ) image_xscale = 1;
else if ( phy_linear_velocity_x &lt; -5 ) image_xscale = -1;

if ( action_kick )
{
    if (sprite_index == sprPlayerKick)
    {
        animation_counter += 1;    
    
        if (animation_counter &gt; 13)
        {
            action_kick = false;
        }
    }
    else
    {
        sprite_index = sprPlayerKick;
        image_speed = 0.3;
        animation_counter = 0;
    }
}
else if ( !place_meeting(x, y + 2, objStatic) &amp;&amp; !place_meeting(x, y + 2, objDynamic) )
//else if ( (!can_jump || (!place_meeting(x, y + 2, objStatic) &amp;&amp; !place_meeting(x, y + 2, objDynamic))) &amp;&amp; abs(phy_linear_velocity_y) &gt; 3  )
{
    if ( is_sliding )
    {
        if ( place_meeting(x + 2, y, objStatic) ) image_xscale = 1;
        else image_xscale = -1;
        
        sprite_index = sprPlayerSlide;
    }
    else
    {
        sprite_index = sprPlayerAir;    
    }
}
else if ( is_crawling )
{
    if ( abs(phy_linear_velocity_x) &gt; 64 ) sprite_index = sprPlayerFloorslide;
    else sprite_index = sprPlayerCrawl;
    
    if ( abs(phy_linear_velocity_x) &gt; 5 ) image_speed = 0.1;
    else image_speed = 0;
}
else if ( phy_linear_velocity_x &gt; 5 )
{
    if (phy_linear_velocity_x &lt; max_velocity_x/1.5) sprite_index = sprPlayerWalking;
    else sprite_index = sprPlayerRunning;

    image_speed = abs(phy_linear_velocity_x) / 400;
}
else if ( phy_linear_velocity_x &lt; -5 )
{
    if (phy_linear_velocity_x &gt; -max_velocity_x/1.5) sprite_index = sprPlayerWalking;
    else sprite_index = sprPlayerRunning;
    
    image_speed = abs(phy_linear_velocity_x) / 400;
}
else 
{
    sprite_index = sprPlayerStanding;
    image_speed = 0.05;
}


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="objDynamic">
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>Collide (do not remove)</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (phy_linear_velocity_y &gt;= 0) can_jump = true;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="objStatic">
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>Collide (do not remove)</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (phy_linear_velocity_y &gt;= 0) can_jump = true;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_self();
/*draw_set_color(c_lime);
draw_point(x, y + sprite_height / 2);

draw_text(x, y, phy_linear_velocity_y);*/
//flag = phy_debug_render_coms | phy_debug_render_shapes
//physics_world_draw_debug(flag);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="17">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>playMusic(sndMiniboss);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>-1</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>2</PhysicsObjectShape>
  <PhysicsObjectDensity>2</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.100000001490116</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>22,20</point>
    <point>22,30</point>
    <point>20,32</point>
    <point>14,32</point>
    <point>12,30</point>
    <point>12,20</point>
  </PhysicsShapePoints>
</object>
