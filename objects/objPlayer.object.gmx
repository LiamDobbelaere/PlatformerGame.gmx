<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprPlayerStanding</spriteName>
  <solid>-1</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>objCollidable</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Initialize

phy_fixed_rotation = true; //Prevents object from rotating due to physics

jump_multiplier = 300;
jump_potential = 0;
jump_max_potential = 10;
jump_potential_multiplier = 25;

move_multiplier = 5;
max_velocity_x = 200;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Controls

if ( keyboard_check_direct(vk_right) &amp;&amp; phy_linear_velocity_x &lt; max_velocity_x )
{
    physics_apply_force(x, y, (phy_mass * move_multiplier), 0);
}

if ( keyboard_check_direct(vk_left) &amp;&amp; phy_linear_velocity_x &gt; -max_velocity_x )
{
    physics_apply_force(x, y, -(phy_mass * move_multiplier), 0);
}

if ( !place_free(x, y + sprite_height / 2 - 6) &amp;&amp; phy_linear_velocity_y &gt; 0 )
{
    jump_potential = 0;
}

if ( keyboard_check_pressed(vk_up) &amp;&amp; !place_free(x, y + sprite_height / 2 - 6) )
{   
    audio_play_sound(sndJump, 0, false);

    physics_apply_force(x, y, 0, -phy_mass * jump_multiplier );
    
    jump_potential = jump_max_potential;
}

if ( keyboard_check_direct(vk_up) &amp;&amp; place_free(x, y + sprite_height / 2 - 6) )
{
    jump_potential -= 1;

    if (jump_potential &gt; 0)
    {
        physics_apply_force(x, y, 0, -phy_mass * jump_potential_multiplier );
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Animations

if ( phy_linear_velocity_x &gt; 5 ) image_xscale = 1;
else if ( phy_linear_velocity_x &lt; -5 ) image_xscale = -1;

if ( place_free(x, y + sprite_height / 2 + 2) )
{
    sprite_index = sprPlayerAir;
}
else if ( phy_linear_velocity_x &gt; 5 )
{
    if (phy_linear_velocity_x &lt; 150) sprite_index = sprPlayerWalking;
    else sprite_index = sprPlayerRunning;

    image_speed = abs(phy_linear_velocity_x) / 400;
}
else if ( phy_linear_velocity_x &lt; -5 )
{
    if (phy_linear_velocity_x &gt; -150) sprite_index = sprPlayerWalking;
    else sprite_index = sprPlayerRunning;
    
    image_speed = abs(phy_linear_velocity_x) / 400;
}
else 
{
    sprite_index = sprPlayerStanding;
    image_speed = 0.05;
}


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="objCollidable">
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>Collide (do not remove)</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>-1</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>1</PhysicsObjectShape>
  <PhysicsObjectDensity>2</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.100000001490116</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>12,11</point>
    <point>21,11</point>
    <point>21,31</point>
    <point>12,31</point>
  </PhysicsShapePoints>
</object>
