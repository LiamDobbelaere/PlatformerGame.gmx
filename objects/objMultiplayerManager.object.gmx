<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Shared init

log = "";
server_port = 7051;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Server init
//7050: TCP
//7051: UDP

if (global.mp_role == "server")
{
    client_map = ds_map_create();

    //server_udp = network_create_server(network_socket_udp, 7050, 1);
    server_udp = network_create_socket_ext(network_socket_udp, server_port);

    
    /*if (server_tcp &lt; 0)
    {
        log += "FAILURE SETTING UP TCP SERVER#";
    }*/
    
    if (server_udp &lt; 0)
    {
        log += "FAILURE SETTING UP UDP SERVER#";
    }
    
    instance_create(0, 0, objPlayer);
    view_visible[0] = true;
    
    log += "SERVER INITIALIZED#";
    
    tickrate = 1;
    
    alarm[0] = tickrate;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Client init
//7050: TCP
//7051: UDP

if (global.mp_role == "client")
{
    remote_ip = "127.0.0.1";
    
    render_queue = ds_list_create();

    //client_tcp = network_create_socket(network_socket_tcp);
    client_udp = network_create_socket_ext(network_socket_udp, 7001);
    
    //network_connect(client_tcp, "178.117.107.177", 7050);
    //network_connect(client_udp, "178.117.107.177", 7050);
    
    /*if (client_tcp &lt; 0)
    {
        log += "FAILURE CONNECTING TO TCP SERVER#";
    }*/
    
    if (client_udp &lt; 0)
    {
        log += "FAILURE CONNECTING TO UDP SERVER#";
    }

    var t_buffer = makeHelloBuffer();
    network_send_udp(client_udp, remote_ip, server_port, t_buffer, buffer_tell(t_buffer));
    buffer_delete(t_buffer);
    
    with (objDynamic) instance_destroy();
    
    instance_create(0, 0, objClientView);
    view_visible[1] = true;
    log += "CLIENT INITIALIZED#";
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Server tick

var tmp_buffer = buffer_create(256, buffer_grow, 1);
buffer_seek(tmp_buffer, buffer_seek_start, 0);
buffer_write(tmp_buffer , buffer_s16, objPlayer.phy_position_x);
buffer_write(tmp_buffer , buffer_s16, objPlayer.phy_position_y);
buffer_write(tmp_buffer , buffer_u8, objPlayer.sprite_index);
buffer_write(tmp_buffer , buffer_s8, objPlayer.image_xscale);
buffer_write(tmp_buffer , buffer_u8, objPlayer.image_index);

if (instance_exists(objClient))
{
    buffer_write(tmp_buffer , buffer_s16, objClient.phy_position_x);
    buffer_write(tmp_buffer , buffer_s16, objClient.phy_position_y);
    buffer_write(tmp_buffer , buffer_u8, objClient.sprite_index);
    buffer_write(tmp_buffer , buffer_s8, objClient.image_xscale);
    buffer_write(tmp_buffer , buffer_u8, objClient.image_index);
}

var dynamicCount = instance_number(objDynamic);
buffer_write(tmp_buffer, buffer_u16, dynamicCount);

for (var i = 0; i &lt; dynamicCount; i++)
{
    var instance = instance_find(objDynamic, i);
    buffer_write(tmp_buffer, buffer_s16, instance.phy_position_x);
    buffer_write(tmp_buffer, buffer_s16, instance.phy_position_y);
    buffer_write(tmp_buffer, buffer_u8, instance.sprite_index);
    buffer_write(tmp_buffer, buffer_s8, instance.image_xscale);
    buffer_write(tmp_buffer, buffer_u8, instance.image_index);
}


if (ds_map_size(client_map) &gt; 0)
{
    var key = ds_map_find_first(client_map);
    network_send_udp(server_udp, key, ds_map_find_value(client_map, key), tmp_buffer, buffer_tell(tmp_buffer));
}

buffer_delete(tmp_buffer);

alarm[0] = tickrate;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Client controls

if (global.mp_role == "client")
{
    netKeyPressRelease(vk_right);
    netKeyPressRelease(vk_left);
    netKeyPressRelease(vk_up);
    netKeyPressRelease(vk_down);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="68">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Server code

if (global.mp_role == "server")
{
    /* TCP (chat/other guarantee-receive operations) */
    var netev_socket = ds_map_find_value(async_load, "id");
    var netev_ip = ds_map_find_value(async_load, "ip");
    var netev_port = ds_map_find_value(async_load, "port");
    
    if netev_socket == server_udp
    {
        var netev_type = ds_map_find_value(async_load, "type");
    
        switch(netev_type)
        {
        /*case network_type_connect:
            var sock = ds_map_find_value(async_load, "socket");
            ds_list_add(socketlist, sock);
            log += "A CLIENT CONNECTED!";
            puppet = instance_create(0, 0, objClient);
            puppet.image_blend = c_aqua;
            break;
        case network_type_disconnect:
            var sock = ds_map_find_value(async_load, "socket");
            ds_list_delete(socketlist, sock);
            log += "A CLIENT DISCONNECTED!";
            with (puppet) instance_destroy();
            break;*/
        case network_type_data:
            var t_buffer = ds_map_find_value(async_load, "buffer");
            var cmd = buffer_read(t_buffer, buffer_string);
            
            switch (cmd)
            {
                case "hello":    
                    ds_map_add(client_map, string(netev_ip), real(netev_port));
                    log += "A CLIENT CONNECTED!";
                    puppet = instance_create(0, 0, objClient);
                    puppet.image_blend = c_aqua;
                    break;
                case "key":
                    var keyname = buffer_read(t_buffer, buffer_u8);
                    
                    switch (keyname)
                    {
                        case vk_right:
                            with (puppet) puppet_moveright_direct = buffer_read(t_buffer, buffer_bool);
                            break;
                        case vk_left:
                            with (puppet) puppet_moveleft_direct = buffer_read(t_buffer, buffer_bool);
                            break;
                        case vk_up:
                            with (puppet) {
                                var bool =  buffer_read(t_buffer, buffer_bool);
                                puppet_upaction_direct = bool;
                                
                                if (bool == true)
                                {
                                    puppet_upaction_pressed = true;
                                }
                                else
                                {
                                    puppet_upaction_released = true;
                                }
                            }
                            break;
                        case vk_down:
                            with (puppet) {
                                var bool =  buffer_read(t_buffer, buffer_bool);
                                puppet_downaction_direct = bool;
                                
                                if (bool == true)
                                {
                                    puppet_downaction_pressed = true;
                                }
                                else
                                {
                                    puppet_downaction_released = true;
                                }
                            }
                            break;
                    }
                    
                    break;
            }        
            break;
        }
    }
}

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Client code

if (global.mp_role == "client")
{      
    var netev_socket = ds_map_find_value(async_load, "id");
    if netev_socket == client_udp
    {   
        var buff = ds_map_find_value(async_load, "buffer"); 
    
        ds_list_clear(render_queue);
        ds_list_add(render_queue, buffer_read(buff, buffer_s16));
        ds_list_add(render_queue, buffer_read(buff, buffer_s16));
        ds_list_add(render_queue, buffer_read(buff, buffer_u8));
        ds_list_add(render_queue, buffer_read(buff, buffer_s8));
        ds_list_add(render_queue, buffer_read(buff, buffer_u8));
        ds_list_add(render_queue, buffer_read(buff, buffer_s16));
        ds_list_add(render_queue, buffer_read(buff, buffer_s16));   
        ds_list_add(render_queue, buffer_read(buff, buffer_u8));
        ds_list_add(render_queue, buffer_read(buff, buffer_s8));
        ds_list_add(render_queue, buffer_read(buff, buffer_u8)); 
        
        var dynamicObjects = buffer_read(buff, buffer_u16);
        for (var i = 0; i &lt; dynamicObjects; i++)
        {
            ds_list_add(render_queue, buffer_read(buff, buffer_s16));
            ds_list_add(render_queue, buffer_read(buff, buffer_s16));   
            ds_list_add(render_queue, buffer_read(buff, buffer_u8));
            ds_list_add(render_queue, buffer_read(buff, buffer_s8));
            ds_list_add(render_queue, buffer_read(buff, buffer_u8)); 
        }
    
        objClientView.x = ds_list_find_value(render_queue, 5);
        objClientView.y = ds_list_find_value(render_queue, 6);      
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="3">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (global.mp_role == "server")
{
    //network_destroy(server_tcp);
    network_destroy(server_udp);
}

if (global.mp_role == "client")
{
    //network_destroy(client_tcp);
    network_destroy(client_udp);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_set_halign(fa_left);
draw_set_valign(fa_top);
draw_set_color(c_black);
draw_set_font(global.font);

if (global.mp_role == "client")
{
    draw_text(view_xview[1], view_yview[1], log);
}
else
{
    draw_text(view_xview[0], view_yview[0], log);
}

if (global.mp_role == "client")
{
    for (var i = 0; i &lt; ds_list_size(render_queue); i+=5)
    {
        var blendCol = c_white;
    
        if (i == 5) //We are second in the render queue
        {
            blendCol = c_aqua;
        }
        
        draw_sprite_ext(ds_list_find_value(render_queue, i + 2), ds_list_find_value(render_queue, i + 4), ds_list_find_value(render_queue, i), 
                                          ds_list_find_value(render_queue, i + 1), ds_list_find_value(render_queue, i + 3), 1, 0, blendCol, 1);
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
