<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Shared init

log = "";
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Server init
//7050: TCP
//7051: UDP

if (global.mp_role == "server")
{
    server_tcp = network_create_server(network_socket_tcp, 7050, 1);
    server_udp = network_create_server(network_socket_udp, 7051, 1);
    
    if (server_tcp &lt; 0)
    {
        log += "FAILURE SETTING UP TCP SERVER#";
    }
    
    if (server_udp &lt; 0)
    {
        log += "FAILURE SETTING UP UDP SERVER#";
    }

    socketlist = ds_list_create();
    
    log += "SERVER INITIALIZED#";
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Client init
//7050: TCP
//7051: UDP

if (global.mp_role == "client")
{
    client_tcp = network_create_socket(network_socket_tcp);
    client_udp = network_create_socket(network_socket_udp);
    
    network_connect(client_tcp, "127.0.0.1", 7050);
    network_connect(client_udp, "127.0.0.1", 7050);
    
    if (client_tcp &lt; 0)
    {
        log += "FAILURE CONNECTING TO TCP SERVER#";
    }
    
    if (client_udp &lt; 0)
    {
        log += "FAILURE CONNECTING TO UDP SERVER#";
    }

    log += "CLIENT INITIALIZED#";
    
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="68">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Server code

log += "NEW EVENT APPORACHES HOLY SHIT#";

if (global.mp_role) != "server" exit;

/* TCP (chat/other guarantee-receive operations) */
var netev_socket = ds_map_find_value(async_load, "id");
//if netev_socket == server_tcp
//{
    log += "NEW NETWORK EVENT:#";

    var netev_type = ds_map_find_value(async_load, "type");

    switch(netev_type)
    {
    case network_type_connect:
        var sock = ds_map_find_value(async_load, "socket");
        ds_list_add(socketlist, sock);
        log += "A CLIENT CONNECTED!";
        break;
    case network_type_disconnect:
        var sock = ds_map_find_value(async_load, "socket");
        ds_map_delete(socketlist, sock);
        log += "A CLIENT DISCONNECTED!";
        break;
    case network_type_data:
        var t_buffer = ds_map_find_value(async_load, "buffer"); 
        var cmd = buffer_read(t_buffer, buffer_string);
        log += "DATA RECEIVED!";
        
        switch (cmd)
        {
            case "keyp":
                var keyname = buffer_read(t_buffer, buffer_string);
                log += "KEY " + keyname  + " PRESS RECEIVED!";
                break;
        }        
        break;
    }
//}

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Client code

if (global.mp_role) != "client" exit;

/* TCP (chat/other guarantee-receive operations) */
var netev_socket = ds_map_find_value(async_load, "id");
if netev_socket == client_tcp
{

}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="3">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (global.mp_role == "client")
{
    network_destroy(server_tcp);
    network_destroy(server_udp);
}

if (global.mp_role == "client")
{
    network_destroy(client_tcp);
    network_destroy(client_udp);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_set_halign(fa_left);
draw_set_valign(fa_top);
draw_set_color(c_black);
draw_set_font(global.font);
draw_text(0, 0, log);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="39">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (global.mp_role == "client")
{
    var t_buffer = buffer_create(256, buffer_grow, 1);
    buffer_seek(t_buffer, buffer_seek_start, 0);
    buffer_write(t_buffer , buffer_string, "keyp");
    buffer_write(t_buffer , buffer_string, "right");
    buffer_write(t_buffer , buffer_bool, true);
    network_send_packet(client_tcp, t_buffer, buffer_tell(t_buffer));
    buffer_delete(t_buffer);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
